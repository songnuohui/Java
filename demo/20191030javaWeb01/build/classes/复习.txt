1:java复习
  java基础
    1：java数据类型
    a:基本数据类型
                 整数相关：byte   -128- 127     -2^7  - 2^7-1
                 short  -32768-32767   -2^15  - 2^15-1
                 int                   -2^31  - 2^31-1
                 long                  -2^63  - 2^63-1
                 
        short s= 32766;
              s=s+1;      
                小数相关：  float       -3.4*E^38 - 3.4*E^38
                  double      -1.7*E^308 - 1.7*E^308
                        字符:   char   占两个字节 符合Uincode    
                           '一个字符' 可以存放中文
                       布尔:  boolean   true  false    
                       
                                       
      默认值：byte  short char int -->0相关
           float--》0f
           long-->0L
           boolean->false
                       
    b:引用类型
                            类 Class
                            数组  Arrays
                            接口 interface   
                            
    类： 把具体相同属性与行为的一系列事物统称为一个类 
            是抽象的概念
   定义类：
 [public 默认]  class 类名{
         
               类体
               
     }
 
 类体: 属性：
            修饰符  数据类型  属性名=值（默认值）;
 
        行为  ： 
          
         修饰符   返回值类型  方法名(参数列表){
         
         
         }
         
 修饰符:
 1:访问修饰符：
                                     本类       同包类       其他包的子类     其他包的其他类
     private:      T       F          F             F
     default:      T       T          F             F
     protected:    T       T          T             F
     public:       T       T          T             T
     
 2：static 修饰符：
           非 static  修饰的属性 类的成员属性 对象之间独立不共享
            
       static  修饰的属性 变成 类属性 只分配一次内存空间
                                类的对象之间共享static属性
                                
 3：final 修饰符：final 最终的 不可变的
 
    
  同一个类中 方法名相同参数列表不同 -》重载 overload
  
  对象：客观存在的事物 是类的实例  类是对象的模板
  
     创建对象的方式：  
    类名 对象名= new 类名(); 调用类的默认构造器
    类名 对象名= new 类名(实际参数列表);调用类的带参构造器
    
构造器：
       是类的特殊方法
       1：方法名与类名相同
       2：没有返回值类型 连void都不能有
  一个类 系统会提供一个默认的构造器（无参数）
   注意：当我们手工给类提供类带参的构造器 系统将不在提供默认
               构造器     
               
    一个类的构造器 可以通过 this(参数) 调用其他的构造器
             但不能互相调用 ，而且   this(参数)必须放在第一句   
             
               
类的关系：  继承  extends
          在一个类的基础上去创建一个新的类
          原来的基础类叫父类（基类） 超类       
          新的类叫子类 （派生类） 让新的类具有父类的属性与行为
         在java中只能单继承（一个类只能存在一个直接父类）
         
    Object 类 在java中一个类如果没有继承其他类 这个类的
        默认父类就是  Object 类   
     Object 类  是java中金字塔最顶端的类       
      Object 类 常用方法：
          toString()   显示对象的字符表示方式
                                      默认是  this.getClass()+@
                         +toHexString(this.hashCode());
          equals()      ==
          hashCode()   获取对象的哈希码值
          getClass() 
          finalize()  释放内存
          
     class final String 类    不可变的字符串序列类
                                                       每次修改会生成一个新的对象
                                                       不可以被继承   
                                                                               
               equals() 重写了Object 的equals()
                                                比较的是字符序列的内容     
                                                                                   
               equalsIgnoreCase()
                                                  忽略大小写比较的是字符序列的内容 
               toString() 显示字符序列的内容                                    
               length()  显示字符串长度
               charAt(i) 获取i位置的字符  i-> 0 -length()-1
               indexOf("字符串a") 去查找 字符串中 第一次出现
                                                                   字符串a的位置
                                                                  如果不存在返回-1 
               indexOf("字符串a",count) 跳过count个字符后 从
                             字符串中 第一次出现字符串a的位置
                             
               lastIndexOf("字符串a") 从末尾开始找字符串中 第一次出现
                                                                         字符串a的位置 
                                                                         
               replace("老的字符串"，"新的字符串")
                                             把字符串中所有的  老的字符串 替换成新的字符串  
                                             
               substring(index); 截取字符串的子串从index位置开始到末尾
               substring(index,int end);
                                                  截取字符串的子串从index位置开始到end-1 
               toLowerCase();
               toUpperCase(); 
               trim()  剔除字符串首尾空格
               split("分隔符") 
                                  对字符串进行分割 返回分割后的字符串数组  
               toCharArray() 把字符串转成字符数组
                                                                 
       StringBuffer 类    可变的字符串序列类   
               append(data) 追加字符到字符串末尾
               insert(index,data)
               delete(int start, int end)
               reverse()  
                
       Math类 数学类
          Math.random(n) 产生 [0-1） 之间的随机数     
          Math.round(n)  按照四舍五入方式取整
          Math.ceil(n)   向上取整
          Math.floor(n)  向下取整
          Math.sqrt(n)  请平方根
          Math.pow(n,m) 请 n的m次方
          Math.abs(n)  绝对值
          
 继承：
    class 子类类名 extends 父类类名{
    
    
    } 
   1:重写 override
             在继承关系中 子类对父类的方法重新实现
     特点：
       1：方法名相同 参数列表也相同
       2:返回值类型必须与父类相同或者可以隐式转换成父类的类型
       3：访问修饰符不能低于父类
       4：抛出的异常不能大于父类
                
  2: super 父类的  子类中用
       super.方法名(参数列表)     
       super(参数列表)  调用父类的构造器
       
             子类的构造器中 默认会调用父类的默认构造器
       super(); 
       注意：父类必须存在默认构造器 如果父类不存在默认构造器
         那么子类的构造器中就必须要手工用 super(参数列表)
         指定调用父类的那个构造器 也是第一句
             
  3：转型

      a: 向上转型    new 子类对象 用父类对象来接收
                                     是安全的 但 子类自身的方法被隐藏 （正常用）
                                     
      b: 向下转型  
                                        向上转型 再向下转型才是可以的
                                         不能直接 向下转型       （慎用）           
          
       c:混合类型转型         （不可用）
  
    判断对象是否是某个类的实例
            对象 instanceof 类名 
            
 
 3:抽象类与接口
 
    抽象类： 
    定义：  abstract class 类名{
                            类体
          }
          
   抽象类 类体 中  普通有的 抽象类都可用有
  抽象类中还可用存在 抽象方法
  抽象方法：只有方法的申明 没有方法体 {}
  注意： 抽象类不能实例化 用来被继承的 用在需求分析中
  
  接口  interface
   接口是非常特殊的抽象：
         jdk8以前 
                 接口中的方法都是抽象的 默认都是 public  abstract
               接口除了抽象方法外只能有常量
               
       jdk8与以后的版本 新增：
            default 方法
                       与static方法              
         
               接口可用继承接口 而且可用多继承  
               
                类可用单继承抽象类   多实现接口     
    class 类名 extends 父类  implements 接口1,...接口n{
    
    
    }                          
            
                                                                                
                                                                                               
                                                                           
                                                                                    
                             
                             
                                                     
                                                                                                   
               
               
               
               
                
       
         
                      
     
            

           
  
  
  
                             
                                
                    
     
     
                   
                                           
    
    
    
